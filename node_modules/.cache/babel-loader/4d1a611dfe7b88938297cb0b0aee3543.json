{"ast":null,"code":"import * as repoAction from \"../actions/repo.action\";\n\nconst repo = (state = {\n  status: null,\n  error: null,\n  userDetails: null,\n  repoDetails: null,\n  filteredRepo: null,\n  user: null,\n  repoLoader: false\n}, action) => {\n  switch (action.type) {\n    case repoAction.USERS_REPO_REQUEST:\n      return Object.assign({}, state, {\n        status: action.status,\n        repoLoader: true\n      });\n\n    case repoAction.USERS_REPO_SUCCESS:\n      return Object.assign({}, state, {\n        repoDetails: action.userDetails,\n        status: action.status\n      });\n\n    case repoAction.USERS_REPO_FAILURE:\n      return Object.assign({}, state, {\n        error: action.error\n      });\n\n    case repoAction.ON_CHANGE_HANDLER:\n      let val = action.event.target.value;\n      let filteredRepo = [];\n\n      if (val.length > 0) {\n        const regex = new RegExp(\"^\".concat(val), \"i\");\n        filteredRepo = state.repoDetails && state.repoDetails.sort().filter(m => regex.test(m.name));\n      } else {\n        filteredRepo = state.repoDetails;\n      }\n\n      return Object.assign({}, state, {\n        filteredRepo: filteredRepo\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default repo;","map":{"version":3,"sources":["/home/shivamxelp/git-mini-project/src/reducers/repo.reducer.js"],"names":["repoAction","repo","state","status","error","userDetails","repoDetails","filteredRepo","user","repoLoader","action","type","USERS_REPO_REQUEST","Object","assign","USERS_REPO_SUCCESS","USERS_REPO_FAILURE","ON_CHANGE_HANDLER","val","event","target","value","length","regex","RegExp","sort","filter","m","test","name"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,wBAA5B;;AACA,MAAMC,IAAI,GAAG,CACXC,KAAK,GAAG;AACNC,EAAAA,MAAM,EAAE,IADF;AAENC,EAAAA,KAAK,EAAE,IAFD;AAGNC,EAAAA,WAAW,EAAE,IAHP;AAINC,EAAAA,WAAW,EAAE,IAJP;AAKNC,EAAAA,YAAY,EAAE,IALR;AAMNC,EAAAA,IAAI,EAAE,IANA;AAONC,EAAAA,UAAU,EAAE;AAPN,CADG,EAUXC,MAVW,KAWR;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,UAAU,CAACY,kBAAhB;AACE,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAC9BC,QAAAA,MAAM,EAAEO,MAAM,CAACP,MADe;AAE9BM,QAAAA,UAAU,EAAE;AAFkB,OAAzB,CAAP;;AAIF,SAAKT,UAAU,CAACe,kBAAhB;AACE,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAC9BI,QAAAA,WAAW,EAAEI,MAAM,CAACL,WADU;AAE9BF,QAAAA,MAAM,EAAEO,MAAM,CAACP;AAFe,OAAzB,CAAP;;AAIF,SAAKH,UAAU,CAACgB,kBAAhB;AACE,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAC9BE,QAAAA,KAAK,EAAEM,MAAM,CAACN;AADgB,OAAzB,CAAP;;AAGF,SAAKJ,UAAU,CAACiB,iBAAhB;AACE,UAAIC,GAAG,GAAGR,MAAM,CAACS,KAAP,CAAaC,MAAb,CAAoBC,KAA9B;AACA,UAAId,YAAY,GAAG,EAAnB;;AACA,UAAIW,GAAG,CAACI,MAAJ,GAAa,CAAjB,EAAoB;AAClB,cAAMC,KAAK,GAAG,IAAIC,MAAJ,YAAeN,GAAf,GAAsB,GAAtB,CAAd;AACAX,QAAAA,YAAY,GACVL,KAAK,CAACI,WAAN,IACAJ,KAAK,CAACI,WAAN,CAAkBmB,IAAlB,GAAyBC,MAAzB,CAAgCC,CAAC,IAAIJ,KAAK,CAACK,IAAN,CAAWD,CAAC,CAACE,IAAb,CAArC,CAFF;AAGD,OALD,MAKO;AACLtB,QAAAA,YAAY,GAAGL,KAAK,CAACI,WAArB;AACD;;AACD,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAC9BK,QAAAA,YAAY,EAAEA;AADgB,OAAzB,CAAP;;AAIF;AACE,aAAOL,KAAP;AA/BJ;AAiCD,CA7CD;;AA8CA,eAAeD,IAAf","sourcesContent":["import * as repoAction from \"../actions/repo.action\";\nconst repo = (\n  state = {\n    status: null,\n    error: null,\n    userDetails: null,\n    repoDetails: null,\n    filteredRepo: null,\n    user: null,\n    repoLoader: false\n  },\n  action\n) => {\n  switch (action.type) {\n    case repoAction.USERS_REPO_REQUEST:\n      return Object.assign({}, state, {\n        status: action.status,\n        repoLoader: true\n      });\n    case repoAction.USERS_REPO_SUCCESS:\n      return Object.assign({}, state, {\n        repoDetails: action.userDetails,\n        status: action.status\n      });\n    case repoAction.USERS_REPO_FAILURE:\n      return Object.assign({}, state, {\n        error: action.error\n      });\n    case repoAction.ON_CHANGE_HANDLER:\n      let val = action.event.target.value;\n      let filteredRepo = [];\n      if (val.length > 0) {\n        const regex = new RegExp(`^${val}`, \"i\");\n        filteredRepo =\n          state.repoDetails &&\n          state.repoDetails.sort().filter(m => regex.test(m.name));\n      } else {\n        filteredRepo = state.repoDetails;\n      }\n      return Object.assign({}, state, {\n        filteredRepo: filteredRepo\n      });\n\n    default:\n      return state;\n  }\n};\nexport default repo;\n"]},"metadata":{},"sourceType":"module"}